#the purpose of this workflow is to catch code that does not work sooner. 
#the pull request will not merge if your new feature is not formatted, linted and unit-tested.
#this way of working can be combined with a future VSCode enviroment in the repo, 
#ensures that everyone has same tools and that checks happen along the way and not at the end of a big push. 

name: Continuous Check

on:
  #pull_request:
  push:
    branches:
      - fix-continuous-check
  workflow_dispatch:

jobs:
  gofmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 

      - name: Use go formatter on project
        run: gofmt -s -w .
    
      - name: Check for gofmt changes
        run: git diff --exit-code #returns 0 if gofmt did not make a change
        continue-on-error: true #allows next step even error is returned

      - name: Fail on gofmt changes 
        if: ${{ failure() }}
        run: |    
          echo "gofmt found changes. Please format your code."
          exit 1 
        #if this step fails, run $gofmt -s -w . from DevOops folder, commit and try again.

  golangci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          cache: false
          go-version: stable
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0
  
  dockerfilelint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: install dockerfilelint
        run: npm install -g dockerfilelint
      
      - name: lint all dockerfiles 
        run: dockerfilelint Dockerfile-minitwit-tests */Dockerfile 

  #TODO: add Unit tests to this workflow
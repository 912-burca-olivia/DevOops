name: Continuous Deployment

on:
  push:
    branches:
      - main

  # allow manual triggers
  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push devoops-app image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./itu-minitwit/dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devoops-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devoops-app:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devoops-app:webbuildcache,mode=max

      - name: Build and push devoops-api image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./itu-minitwit-api/dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devoops-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devoops-api:mysqlbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/devoops-api:mysqlbuildcache,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run test stack via Docker Compose
        run: |
          docker compose -f docker-compose_test_local.yml up --abort-on-container-exit --exit-code-from test_runner

      - name: Tear down test stack
        if: always()
        run: docker compose -f docker-compose_test_local.yml down -v

### SSH_HOST_ACTIVE is the FLOATING IP for the active droplet/server
### SSH_HOST_PASSIVE is the FLOATING IP for the inactive droplet/server
  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Add both Floating IPs to known_hosts
        run: |
          echo "SSH_HOST_ACTIVE is: $SSH_HOST_ACTIVE"
          echo "SSH_HOST_PASSIVE is: $SSH_HOST_PASSIVE"
          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST_ACTIVE >> ~/.ssh/known_hosts
          ssh-keyscan -H $SSH_HOST_PASSIVE >> ~/.ssh/known_hosts
        env:
          SSH_HOST_ACTIVE: ${{ secrets.SSH_HOST_ACTIVE }}
          SSH_HOST_PASSIVE: ${{ secrets.SSH_HOST_PASSIVE }}

      - name: Configure SSH
        run: |
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          
      - name: Deploy to passive server (given by floating IP)
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST_PASSIVE "
            source ~/.bash_profile && \
            cd /home/vagrant/DevOops && \
            docker compose -f docker-compose.yml pull && \
            docker compose -f docker-compose.yml up -d
          "
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST_PASSIVE: ${{ secrets.SSH_HOST_PASSIVE }}

      - name: Determine active/passive droplet IDs
        id: determine_droplets
        run: |
          active_id=$(curl -s -H "Authorization: Bearer $DO_API_TOKEN" \https://api.digitalocean.com/v2/floating_ips/$SSH_HOST_ACTIVE | jq -r '.floating_ip.droplet.id')

          passive_id=$(curl -s -H "Authorization: Bearer $DO_API_TOKEN" \
            https://api.digitalocean.com/v2/floating_ips/$SSH_HOST_PASSIVE | jq -r '.floating_ip.droplet.id')

          echo "active_id=$active_id" >> $GITHUB_OUTPUT
          echo "passive_id=$passive_id" >> $GITHUB_OUTPUT
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          SSH_HOST_ACTIVE: ${{ secrets.SSH_HOST_ACTIVE }}
          SSH_HOST_PASSIVE: ${{ secrets.SSH_HOST_PASSIVE }}

      - name: Unassign passive floating IP
        run: |
          curl -X POST "https://api.digitalocean.com/v2/floating_ips/${{ secrets.SSH_HOST_PASSIVE }}/actions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DO_API_TOKEN" \
            -d '{"type":"unassign"}'
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}

      - name: Wait for unassignment
        run: sleep 10

      - name: Assign active IP to passive droplet
        run: |
          curl -X POST "https://api.digitalocean.com/v2/floating_ips/${{ secrets.SSH_HOST_ACTIVE }}/actions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DO_API_TOKEN" \
            -d "{\"type\":\"assign\", \"droplet_id\": ${{ steps.determine_droplets.outputs.passive_id }} }"
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}

      - name: Wait for reassignment
        run: sleep 10

      - name: Assign passive IP to previously active droplet
        run: |
          curl -X POST "https://api.digitalocean.com/v2/floating_ips/${{ secrets.SSH_HOST_PASSIVE }}/actions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DO_API_TOKEN" \
            -d "{\"type\":\"assign\", \"droplet_id\": ${{ steps.determine_droplets.outputs.active_id }} }"
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}


      - name: Deploy to passive server (given by floating IP)
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST_PASSIVE "
            source ~/.bash_profile && \
            cd /home/vagrant/DevOops && \
            docker compose -f docker-compose.yml pull && \
            docker compose -f docker-compose.yml up -d
          "
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST_PASSIVE: ${{ secrets.SSH_HOST_PASSIVE }}


# To be added to copy files to remote server
# scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./ root@67.207.75.4:/home/vagrant/DevOops

# add this line for activating logging:
# docker compose -f docker-compose.yml up --build setup && \
# after 'docker compose -f docker-compose.yml pull && \'

